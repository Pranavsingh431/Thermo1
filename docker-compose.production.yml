version: '3.8'

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend-1
      - backend-2
      - backend-3
    restart: unless-stopped

  # Backend Services (Multiple instances for load balancing)
  backend-1:
    build: 
      context: ./backend
      dockerfile: Dockerfile.production
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/thermal_inspection
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPEN_ROUTER_KEY=${OPEN_ROUTER_KEY}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - thermal_data:/app/static
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  backend-2:
    build: 
      context: ./backend
      dockerfile: Dockerfile.production
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/thermal_inspection
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPEN_ROUTER_KEY=${OPEN_ROUTER_KEY}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - thermal_data:/app/static
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  backend-3:
    build: 
      context: ./backend
      dockerfile: Dockerfile.production
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/thermal_inspection
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPEN_ROUTER_KEY=${OPEN_ROUTER_KEY}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - thermal_data:/app/static
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Celery Workers for AI Processing
  celery-worker-1:
    build: 
      context: ./backend
      dockerfile: Dockerfile.production
    command: celery -A app.workers.tasks worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/thermal_inspection
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPEN_ROUTER_KEY=${OPEN_ROUTER_KEY}
    volumes:
      - thermal_data:/app/static
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  celery-worker-2:
    build: 
      context: ./backend
      dockerfile: Dockerfile.production
    command: celery -A app.workers.tasks worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/thermal_inspection
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPEN_ROUTER_KEY=${OPEN_ROUTER_KEY}
    volumes:
      - thermal_data:/app/static
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.production
    ports:
      - "3000:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Database with connection pooling
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=thermal_inspection
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    command: redis-server --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  thermal_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge

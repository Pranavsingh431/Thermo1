"""
Production Report Generator - Simplified but Functional
"""

import os
import json
import logging
from datetime import datetime
from typing import Dict, List, Any
from pathlib import Path

logger = logging.getLogger(__name__)

class ProductionReportGenerator:
    """Simplified but functional report generator"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.reports_dir = Path("static/reports")
        self.reports_dir.mkdir(exist_ok=True)
        self.logger.info("ðŸ“‹ Production Report Generator initialized")
    
    async def generate_comprehensive_report(self, analysis_data: Dict, scan_data: Dict, 
                                          detections: List = None) -> Dict[str, Any]:
        """Generate comprehensive report in multiple formats"""
        
        try:
            report_id = f"TIR_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{scan_data.get('id', 'unknown')}"
            
            # Generate JSON report
            json_report = {
                'report_id': report_id,
                'generated_at': datetime.now().isoformat(),
                'image_file': scan_data.get('original_filename', 'Unknown'),
                'substation': scan_data.get('substation_name', 'Unknown'),
                'thermal_analysis': {
                    'max_temperature': analysis_data.get('max_temperature_detected', 0),
                    'min_temperature': analysis_data.get('min_temperature_detected', 0),
                    'avg_temperature': analysis_data.get('avg_temperature', 0),
                    'critical_hotspots': analysis_data.get('critical_hotspots', 0),
                    'total_hotspots': analysis_data.get('total_hotspots', 0)
                },
                'component_analysis': {
                    'total_components': analysis_data.get('total_components_detected', 0),
                    'nuts_bolts': analysis_data.get('nuts_bolts_count', 0),
                    'mid_span_joints': analysis_data.get('mid_span_joints_count', 0)
                },
                'risk_assessment': {
                    'overall_risk_level': analysis_data.get('overall_risk_level', 'low'),
                    'risk_score': analysis_data.get('risk_score', 0),
                    'immediate_action_required': analysis_data.get('requires_immediate_attention', False)
                },
                'detections': detections or []
            }
            
            # Save JSON report
            json_path = self.reports_dir / f"{report_id}.json"
            with open(json_path, 'w') as f:
                json.dump(json_report, f, indent=2, default=str)
            
            # Generate text summary
            text_summary = f"""
THERMAL INSPECTION REPORT
========================
Report ID: {report_id}
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

INSPECTION DETAILS
------------------
Image: {scan_data.get('original_filename', 'Unknown')}
Substation: {scan_data.get('substation_name', 'Unknown')}
Camera: {scan_data.get('camera_model', 'Unknown')}

THERMAL ANALYSIS
----------------
Max Temperature: {analysis_data.get('max_temperature_detected', 0):.1f}Â°C
Min Temperature: {analysis_data.get('min_temperature_detected', 0):.1f}Â°C
Average Temperature: {analysis_data.get('avg_temperature', 0):.1f}Â°C

COMPONENT DETECTION
-------------------
Total Components: {analysis_data.get('total_components_detected', 0)}
Nuts/Bolts: {analysis_data.get('nuts_bolts_count', 0)}
Mid-Span Joints: {analysis_data.get('mid_span_joints_count', 0)}

RISK ASSESSMENT
---------------
Risk Level: {analysis_data.get('overall_risk_level', 'low').upper()}
Risk Score: {analysis_data.get('risk_score', 0)}/100
Immediate Action: {'YES' if analysis_data.get('requires_immediate_attention') else 'NO'}

AI ANALYSIS
-----------
Model: {analysis_data.get('model_version', 'Unknown')}
Processing Time: {analysis_data.get('processing_duration_seconds', 0):.2f}s
FLIR Calibrated: {'Yes' if analysis_data.get('thermal_calibration_used') else 'No'}

Generated by Tata Power Thermal Eye System
"""
            
            # Save text summary
            text_path = self.reports_dir / f"{report_id}_summary.txt"
            with open(text_path, 'w') as f:
                f.write(text_summary)
            
            # Generate email alert
            email_content = f"""Subject: Thermal Inspection Report {report_id}

THERMAL INSPECTION ALERT
Substation: {scan_data.get('substation_name', 'Unknown')}
Risk Level: {analysis_data.get('overall_risk_level', 'low').upper()}
Max Temperature: {analysis_data.get('max_temperature_detected', 0):.1f}Â°C
Components Detected: {analysis_data.get('total_components_detected', 0)}

{'ðŸš¨ IMMEDIATE ACTION REQUIRED' if analysis_data.get('requires_immediate_attention') else 'âœ… Normal Operation'}

Report ID: {report_id}
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            
            email_path = self.reports_dir / f"{report_id}_email.txt"
            with open(email_path, 'w') as f:
                f.write(email_content)
            
            return {
                'report_id': report_id,
                'generated_at': datetime.now(),
                'formats_generated': ['json', 'text', 'email'],
                'files': {
                    'json': str(json_path),
                    'text': str(text_path),
                    'email': str(email_path)
                },
                'summary_text': text_summary[:200] + '...',
                'risk_level': analysis_data.get('overall_risk_level', 'low'),
                'immediate_action_required': analysis_data.get('requires_immediate_attention', False)
            }
            
        except Exception as e:
            self.logger.error(f"Report generation failed: {e}")
            return {'error': str(e), 'report_id': None}

# Global instance
production_report_generator = ProductionReportGenerator() 
# Production Docker Compose for Tata Power Thermal Eye
# ====================================================
# 
# This configuration provides bulletproof production deployment with:
# - Health checks and monitoring
# - Resource limits and security
# - Automatic database migration
# - Persistent data volumes
# - Production logging

version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: thermal_eye_db_prod
    environment:
      POSTGRES_DB: thermal_inspection_prod
      POSTGRES_USER: thermal_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_thermal_password_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/thermal_inspection_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U thermal_user -d thermal_inspection_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    networks:
      - thermal_network

  # Redis (Caching and Session Storage)
  redis:
    image: redis:7-alpine
    container_name: thermal_eye_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-thermal_redis_password_2024}
    volumes:
      - redis_data_prod:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    networks:
      - thermal_network

  # Backend API (Bulletproof Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        - ENVIRONMENT=production
    container_name: thermal_eye_backend_prod
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://thermal_user:${POSTGRES_PASSWORD:-secure_thermal_password_2024}@postgres:5432/thermal_inspection_prod
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-thermal_redis_password_2024}@redis:6379/0
      
      # Application Configuration
      ENVIRONMENT: production
      SECRET_KEY: ${SECRET_KEY:-bulletproof_thermal_secret_key_2024_tata_power}
      
      # FLIR Configuration
      FLIR_CALIBRATION_ENABLED: "true"
      AMBIENT_TEMPERATURE_DEFAULT: "34.0"
      
      # AI Model Configuration
      MODEL_INTEGRITY_CHECK: "true"
      YOLO_MODEL_PATH: "/app/models/yolo_nas_s_coco.pth"
      
      # Security Configuration
      ALLOWED_ORIGINS: "http://localhost:3000,http://127.0.0.1:3000,https://thermal.tatapower.com"
      FILE_UPLOAD_MAX_SIZE: "26214400"  # 25MB
      
      # Monitoring Configuration
      LOG_LEVEL: "INFO"
      HEALTH_CHECK_INTERVAL: "30"
      
      # Email Configuration (for reports)
      SMTP_HOST: ${SMTP_HOST:-smtp.tatapower.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-thermal@tatapower.com}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      
    volumes:
      - thermal_images_prod:/app/static/thermal_images
      - processed_images_prod:/app/static/processed_images
      - reports_prod:/app/static/reports
      - logs_prod:/app/logs
      - models_prod:/app/models
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - thermal_network

  # Frontend (React Production Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - REACT_APP_API_URL=http://localhost:8000
        - REACT_APP_ENVIRONMENT=production
    container_name: thermal_eye_frontend_prod
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    networks:
      - thermal_network

  # Nginx Reverse Proxy (Production Load Balancer)
  nginx:
    image: nginx:alpine
    container_name: thermal_eye_nginx_prod
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - logs_prod:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    networks:
      - thermal_network

  # Monitoring and Metrics (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: thermal_eye_prometheus_prod
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_prod:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    restart: unless-stopped
    networks:
      - thermal_network

  # Log Aggregation (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: thermal_eye_grafana_prod
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-thermal_grafana_2024}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - thermal_network

# Persistent Volumes
volumes:
  postgres_data_prod:
    driver: local
    name: thermal_eye_postgres_prod
  redis_data_prod:
    driver: local
    name: thermal_eye_redis_prod
  thermal_images_prod:
    driver: local
    name: thermal_eye_images_prod
  processed_images_prod:
    driver: local
    name: thermal_eye_processed_prod
  reports_prod:
    driver: local
    name: thermal_eye_reports_prod
  logs_prod:
    driver: local
    name: thermal_eye_logs_prod
  models_prod:
    driver: local
    name: thermal_eye_models_prod
  prometheus_data_prod:
    driver: local
    name: thermal_eye_prometheus_prod
  grafana_data_prod:
    driver: local
    name: thermal_eye_grafana_prod

# Networks
networks:
  thermal_network:
    driver: bridge
    name: thermal_eye_network_prod 
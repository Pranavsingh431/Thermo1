version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: thermal_postgres
    environment:
      POSTGRES_DB: thermal_inspection
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./thermal_inspection_schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d thermal_inspection"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and job queue
  redis:
    image: redis:7-alpine
    container_name: thermal_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: thermal_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/thermal_inspection
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
      - SECRET_KEY=dev-secret-key-change-in-production
      - ENVIRONMENT=development
      - DEBUG=true
    volumes:
      - ./backend:/app
      - ./ai-pipeline:/app/ai-pipeline
      - thermal_images:/app/static/thermal_images
      - processed_images:/app/static/processed_images
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for AI processing
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: thermal_celery
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/thermal_inspection
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
      - SECRET_KEY=dev-secret-key-change-in-production
    volumes:
      - ./backend:/app
      - ./ai-pipeline:/app/ai-pipeline
      - thermal_images:/app/static/thermal_images
      - processed_images:/app/static/processed_images
    depends_on:
      - redis
      - postgres
      - backend
    command: celery -A app.workers.celery_app worker --loglevel=info --concurrency=2
    restart: unless-stopped

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: thermal_beat
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/thermal_inspection
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    volumes:
      - ./backend:/app
    depends_on:
      - redis
      - postgres
    command: celery -A app.workers.celery_app beat --loglevel=info
    restart: unless-stopped

  # Celery Flower for monitoring
  celery-flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: thermal_flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    depends_on:
      - redis
      - celery-worker
    command: celery -A app.workers.celery_app flower --port=5555
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: thermal_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - REACT_APP_WS_URL=ws://localhost:8000/ws
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    stdin_open: true
    tty: true

  # Nginx reverse proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: thermal_nginx
    ports:
      - "80:80"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf
      - thermal_images:/var/www/static/thermal_images
      - processed_images:/var/www/static/processed_images
    depends_on:
      - backend
      - frontend
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  thermal_images:
    driver: local
  processed_images:
    driver: local

networks:
  default:
    name: thermal_inspection_network 
# Production Dockerfile for Tata Power Thermal Eye Backend
# ========================================================
# Multi-stage build for production optimization

# Build stage
FROM python:3.11-slim as builder

WORKDIR /build

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    libmagic1 \
    libmagic-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements-production.txt .
RUN pip install --no-cache-dir --user -r requirements-production.txt

# Production stage
FROM python:3.11-slim

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV ENVIRONMENT=production
ENV PYTHONPATH=/app

# Install system dependencies for production
RUN apt-get update && apt-get install -y \
    libpq5 \
    libmagic1 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && useradd --create-home --shell /bin/bash thermal

# Copy Python packages from builder
COPY --from=builder /root/.local /home/thermal/.local

# Create app directory and set ownership
WORKDIR /app
RUN chown thermal:thermal /app

# Copy application code
COPY --chown=thermal:thermal . /app/

# Create required directories
RUN mkdir -p /app/static/thermal_images \
             /app/static/processed_images \
             /app/static/reports \
             /app/logs \
             /app/models \
    && chown -R thermal:thermal /app

# Copy entrypoint script
COPY --chown=thermal:thermal entrypoint.prod.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Switch to non-root user
USER thermal

# Set PATH to include local packages
ENV PATH="/home/thermal/.local/bin:$PATH"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:8000/api/health || exit 1

# Expose port
EXPOSE 8000

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Default command
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "4", "--worker-class", "uvicorn.workers.UvicornWorker", "--timeout", "120", "--keep-alive", "2", "--max-requests", "1000", "--max-requests-jitter", "50", "app.main:app"] 
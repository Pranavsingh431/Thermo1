"""Add refresh tokens and 2FA fields

Revision ID: f97d3b8ae20a
Revises: 6a1b
Create Date: 2025-08-12 05:36:34.633873

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f97d3b8ae20a'
down_revision: Union[str, None] = '6a1b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('app_settings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.String(length=100), nullable=False),
    sa.Column('value', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key', name='uq_app_settings_key')
    )
    op.create_index(op.f('ix_app_settings_id'), 'app_settings', ['id'], unique=False)
    op.create_index(op.f('ix_app_settings_key'), 'app_settings', ['key'], unique=False)
    op.create_table('substations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('code', sa.String(length=50), nullable=False),
    sa.Column('voltage_level', sa.String(length=50), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=False),
    sa.Column('longitude', sa.Float(), nullable=False),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('state', sa.String(length=100), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=True),
    sa.Column('boundary_coordinates', sa.JSON(), nullable=True),
    sa.Column('inspection_radius', sa.Float(), nullable=True),
    sa.Column('commissioning_date', sa.DateTime(), nullable=True),
    sa.Column('capacity_mw', sa.Float(), nullable=True),
    sa.Column('num_circuits', sa.Integer(), nullable=True),
    sa.Column('num_transformers', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('maintenance_status', sa.String(length=50), nullable=True),
    sa.Column('control_room_phone', sa.String(length=20), nullable=True),
    sa.Column('engineer_in_charge', sa.String(length=255), nullable=True),
    sa.Column('emergency_contact', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('special_instructions', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_substation_active', 'substations', ['is_active'], unique=False)
    op.create_index('idx_substation_location', 'substations', ['latitude', 'longitude'], unique=False)
    op.create_index('idx_substation_voltage', 'substations', ['voltage_level'], unique=False)
    op.create_index(op.f('ix_substations_code'), 'substations', ['code'], unique=True)
    op.create_index(op.f('ix_substations_id'), 'substations', ['id'], unique=False)
    op.create_index(op.f('ix_substations_latitude'), 'substations', ['latitude'], unique=False)
    op.create_index(op.f('ix_substations_longitude'), 'substations', ['longitude'], unique=False)
    op.create_index(op.f('ix_substations_name'), 'substations', ['name'], unique=False)
    op.create_table('task_runs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_name', sa.String(length=200), nullable=False),
    sa.Column('task_id', sa.String(length=100), nullable=False),
    sa.Column('args', sa.JSON(), nullable=True),
    sa.Column('kwargs', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('finished_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('duration_seconds', sa.Float(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('worker_hostname', sa.String(length=200), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_task_runs_id'), 'task_runs', ['id'], unique=False)
    op.create_index(op.f('ix_task_runs_status'), 'task_runs', ['status'], unique=False)
    op.create_index(op.f('ix_task_runs_task_id'), 'task_runs', ['task_id'], unique=False)
    op.create_index(op.f('ix_task_runs_task_name'), 'task_runs', ['task_name'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=False),
    sa.Column('employee_id', sa.String(length=50), nullable=True),
    sa.Column('department', sa.String(length=100), nullable=True),
    sa.Column('designation', sa.String(length=100), nullable=True),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('phone_number', sa.String(length=20), nullable=True),
    sa.Column('notification_email', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('login_count', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('two_factor_secret', sa.String(length=32), nullable=True),
    sa.Column('two_factor_enabled', sa.Boolean(), nullable=False),
    sa.Column('backup_codes', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_created', 'users', ['created_at'], unique=False)
    op.create_index('idx_user_department', 'users', ['department'], unique=False)
    op.create_index('idx_user_role_active', 'users', ['role', 'is_active'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_employee_id'), 'users', ['employee_id'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('refresh_tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('family_id', sa.String(length=255), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_revoked', sa.Boolean(), nullable=False),
    sa.Column('device_info', sa.String(length=500), nullable=True),
    sa.Column('last_used', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_refresh_tokens_family_id'), 'refresh_tokens', ['family_id'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_id'), 'refresh_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_token'), 'refresh_tokens', ['token'], unique=True)
    op.create_table('thermal_scans',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('original_filename', sa.String(length=255), nullable=False),
    sa.Column('file_path', sa.String(length=500), nullable=True),
    sa.Column('file_size_bytes', sa.Integer(), nullable=True),
    sa.Column('file_hash', sa.String(length=64), nullable=True),
    sa.Column('camera_model', sa.String(length=100), nullable=True),
    sa.Column('camera_software_version', sa.String(length=50), nullable=True),
    sa.Column('image_width', sa.Integer(), nullable=True),
    sa.Column('image_height', sa.Integer(), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('altitude', sa.Float(), nullable=True),
    sa.Column('gps_timestamp', sa.DateTime(), nullable=True),
    sa.Column('gps_accuracy', sa.Float(), nullable=True),
    sa.Column('capture_timestamp', sa.DateTime(), nullable=False),
    sa.Column('ambient_temperature', sa.Float(), nullable=True),
    sa.Column('camera_settings', sa.JSON(), nullable=True),
    sa.Column('processing_status', sa.String(length=50), nullable=False),
    sa.Column('processing_started_at', sa.DateTime(), nullable=True),
    sa.Column('processing_completed_at', sa.DateTime(), nullable=True),
    sa.Column('processing_duration_seconds', sa.Float(), nullable=True),
    sa.Column('is_good_quality', sa.Boolean(), nullable=True),
    sa.Column('quality_score', sa.Float(), nullable=True),
    sa.Column('quality_issues', sa.JSON(), nullable=True),
    sa.Column('batch_id', sa.String(length=100), nullable=True),
    sa.Column('batch_sequence', sa.Integer(), nullable=True),
    sa.Column('substation_id', sa.Integer(), nullable=True),
    sa.Column('uploaded_by', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['substation_id'], ['substations.id'], ),
    sa.ForeignKeyConstraint(['uploaded_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_thermal_scan_batch', 'thermal_scans', ['batch_id', 'batch_sequence'], unique=False)
    op.create_index('idx_thermal_scan_location', 'thermal_scans', ['latitude', 'longitude'], unique=False)
    op.create_index('idx_thermal_scan_quality', 'thermal_scans', ['is_good_quality', 'quality_score'], unique=False)
    op.create_index('idx_thermal_scan_status_created', 'thermal_scans', ['processing_status', 'created_at'], unique=False)
    op.create_index('idx_thermal_scan_substation_date', 'thermal_scans', ['substation_id', 'capture_timestamp'], unique=False)
    op.create_index(op.f('ix_thermal_scans_batch_id'), 'thermal_scans', ['batch_id'], unique=False)
    op.create_index(op.f('ix_thermal_scans_capture_timestamp'), 'thermal_scans', ['capture_timestamp'], unique=False)
    op.create_index(op.f('ix_thermal_scans_file_hash'), 'thermal_scans', ['file_hash'], unique=False)
    op.create_index(op.f('ix_thermal_scans_id'), 'thermal_scans', ['id'], unique=False)
    op.create_index(op.f('ix_thermal_scans_latitude'), 'thermal_scans', ['latitude'], unique=False)
    op.create_index(op.f('ix_thermal_scans_longitude'), 'thermal_scans', ['longitude'], unique=False)
    op.create_index(op.f('ix_thermal_scans_processing_status'), 'thermal_scans', ['processing_status'], unique=False)
    op.create_index(op.f('ix_thermal_scans_substation_id'), 'thermal_scans', ['substation_id'], unique=False)
    op.create_index(op.f('ix_thermal_scans_uploaded_by'), 'thermal_scans', ['uploaded_by'], unique=False)
    op.create_table('ai_analyses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('thermal_scan_id', sa.Integer(), nullable=False),
    sa.Column('model_version', sa.String(length=100), nullable=False),
    sa.Column('yolo_model_path', sa.String(length=255), nullable=True),
    sa.Column('quality_model_path', sa.String(length=255), nullable=True),
    sa.Column('analysis_status', sa.String(length=50), nullable=False),
    sa.Column('analysis_timestamp', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('processing_duration_seconds', sa.Float(), nullable=True),
    sa.Column('is_good_quality', sa.Boolean(), nullable=False),
    sa.Column('quality_score', sa.Float(), nullable=False),
    sa.Column('quality_issues', sa.JSON(), nullable=True),
    sa.Column('ambient_temperature', sa.Float(), nullable=True),
    sa.Column('max_temperature_detected', sa.Float(), nullable=True),
    sa.Column('min_temperature_detected', sa.Float(), nullable=True),
    sa.Column('avg_temperature', sa.Float(), nullable=True),
    sa.Column('temperature_variance', sa.Float(), nullable=True),
    sa.Column('total_hotspots', sa.Integer(), nullable=True),
    sa.Column('critical_hotspots', sa.Integer(), nullable=True),
    sa.Column('potential_hotspots', sa.Integer(), nullable=True),
    sa.Column('normal_zones', sa.Integer(), nullable=True),
    sa.Column('total_components_detected', sa.Integer(), nullable=True),
    sa.Column('nuts_bolts_count', sa.Integer(), nullable=True),
    sa.Column('mid_span_joints_count', sa.Integer(), nullable=True),
    sa.Column('polymer_insulators_count', sa.Integer(), nullable=True),
    sa.Column('overall_risk_level', sa.String(length=50), nullable=True),
    sa.Column('risk_score', sa.Float(), nullable=True),
    sa.Column('requires_immediate_attention', sa.Boolean(), nullable=True),
    sa.Column('summary_text', sa.Text(), nullable=True),
    sa.Column('recommendations', sa.JSON(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('warnings', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['thermal_scan_id'], ['thermal_scans.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_ai_analysis_attention', 'ai_analyses', ['requires_immediate_attention'], unique=False)
    op.create_index('idx_ai_analysis_hotspots', 'ai_analyses', ['critical_hotspots', 'potential_hotspots'], unique=False)
    op.create_index('idx_ai_analysis_quality', 'ai_analyses', ['is_good_quality', 'quality_score'], unique=False)
    op.create_index('idx_ai_analysis_risk', 'ai_analyses', ['overall_risk_level', 'risk_score'], unique=False)
    op.create_index('idx_ai_analysis_status', 'ai_analyses', ['analysis_status'], unique=False)
    op.create_index(op.f('ix_ai_analyses_id'), 'ai_analyses', ['id'], unique=False)
    op.create_index(op.f('ix_ai_analyses_thermal_scan_id'), 'ai_analyses', ['thermal_scan_id'], unique=True)
    op.create_table('detections',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ai_analysis_id', sa.Integer(), nullable=False),
    sa.Column('component_type', sa.String(length=100), nullable=False),
    sa.Column('confidence', sa.Float(), nullable=False),
    sa.Column('bbox_x', sa.Float(), nullable=False),
    sa.Column('bbox_y', sa.Float(), nullable=False),
    sa.Column('bbox_width', sa.Float(), nullable=False),
    sa.Column('bbox_height', sa.Float(), nullable=False),
    sa.Column('center_x', sa.Float(), nullable=False),
    sa.Column('center_y', sa.Float(), nullable=False),
    sa.Column('max_temperature', sa.Float(), nullable=True),
    sa.Column('avg_temperature', sa.Float(), nullable=True),
    sa.Column('min_temperature', sa.Float(), nullable=True),
    sa.Column('hotspot_classification', sa.String(length=50), nullable=False),
    sa.Column('temperature_above_ambient', sa.Float(), nullable=True),
    sa.Column('risk_level', sa.String(length=50), nullable=True),
    sa.Column('risk_factors', sa.JSON(), nullable=True),
    sa.Column('area_pixels', sa.Integer(), nullable=True),
    sa.Column('aspect_ratio', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['ai_analysis_id'], ['ai_analyses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_detection_component', 'detections', ['component_type'], unique=False)
    op.create_index('idx_detection_confidence', 'detections', ['confidence'], unique=False)
    op.create_index('idx_detection_hotspot', 'detections', ['hotspot_classification'], unique=False)
    op.create_index('idx_detection_risk', 'detections', ['risk_level'], unique=False)
    op.create_index('idx_detection_temperature', 'detections', ['max_temperature'], unique=False)
    op.create_index(op.f('ix_detections_ai_analysis_id'), 'detections', ['ai_analysis_id'], unique=False)
    op.create_index(op.f('ix_detections_component_type'), 'detections', ['component_type'], unique=False)
    op.create_index(op.f('ix_detections_id'), 'detections', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_detections_id'), table_name='detections')
    op.drop_index(op.f('ix_detections_component_type'), table_name='detections')
    op.drop_index(op.f('ix_detections_ai_analysis_id'), table_name='detections')
    op.drop_index('idx_detection_temperature', table_name='detections')
    op.drop_index('idx_detection_risk', table_name='detections')
    op.drop_index('idx_detection_hotspot', table_name='detections')
    op.drop_index('idx_detection_confidence', table_name='detections')
    op.drop_index('idx_detection_component', table_name='detections')
    op.drop_table('detections')
    op.drop_index(op.f('ix_ai_analyses_thermal_scan_id'), table_name='ai_analyses')
    op.drop_index(op.f('ix_ai_analyses_id'), table_name='ai_analyses')
    op.drop_index('idx_ai_analysis_status', table_name='ai_analyses')
    op.drop_index('idx_ai_analysis_risk', table_name='ai_analyses')
    op.drop_index('idx_ai_analysis_quality', table_name='ai_analyses')
    op.drop_index('idx_ai_analysis_hotspots', table_name='ai_analyses')
    op.drop_index('idx_ai_analysis_attention', table_name='ai_analyses')
    op.drop_table('ai_analyses')
    op.drop_index(op.f('ix_thermal_scans_uploaded_by'), table_name='thermal_scans')
    op.drop_index(op.f('ix_thermal_scans_substation_id'), table_name='thermal_scans')
    op.drop_index(op.f('ix_thermal_scans_processing_status'), table_name='thermal_scans')
    op.drop_index(op.f('ix_thermal_scans_longitude'), table_name='thermal_scans')
    op.drop_index(op.f('ix_thermal_scans_latitude'), table_name='thermal_scans')
    op.drop_index(op.f('ix_thermal_scans_id'), table_name='thermal_scans')
    op.drop_index(op.f('ix_thermal_scans_file_hash'), table_name='thermal_scans')
    op.drop_index(op.f('ix_thermal_scans_capture_timestamp'), table_name='thermal_scans')
    op.drop_index(op.f('ix_thermal_scans_batch_id'), table_name='thermal_scans')
    op.drop_index('idx_thermal_scan_substation_date', table_name='thermal_scans')
    op.drop_index('idx_thermal_scan_status_created', table_name='thermal_scans')
    op.drop_index('idx_thermal_scan_quality', table_name='thermal_scans')
    op.drop_index('idx_thermal_scan_location', table_name='thermal_scans')
    op.drop_index('idx_thermal_scan_batch', table_name='thermal_scans')
    op.drop_table('thermal_scans')
    op.drop_index(op.f('ix_refresh_tokens_token'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_id'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_family_id'), table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_employee_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index('idx_user_role_active', table_name='users')
    op.drop_index('idx_user_department', table_name='users')
    op.drop_index('idx_user_created', table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_task_runs_task_name'), table_name='task_runs')
    op.drop_index(op.f('ix_task_runs_task_id'), table_name='task_runs')
    op.drop_index(op.f('ix_task_runs_status'), table_name='task_runs')
    op.drop_index(op.f('ix_task_runs_id'), table_name='task_runs')
    op.drop_table('task_runs')
    op.drop_index(op.f('ix_substations_name'), table_name='substations')
    op.drop_index(op.f('ix_substations_longitude'), table_name='substations')
    op.drop_index(op.f('ix_substations_latitude'), table_name='substations')
    op.drop_index(op.f('ix_substations_id'), table_name='substations')
    op.drop_index(op.f('ix_substations_code'), table_name='substations')
    op.drop_index('idx_substation_voltage', table_name='substations')
    op.drop_index('idx_substation_location', table_name='substations')
    op.drop_index('idx_substation_active', table_name='substations')
    op.drop_table('substations')
    op.drop_index(op.f('ix_app_settings_key'), table_name='app_settings')
    op.drop_index(op.f('ix_app_settings_id'), table_name='app_settings')
    op.drop_table('app_settings')
    # ### end Alembic commands ###
